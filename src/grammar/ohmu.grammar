
// First rule for files
definitions ::=
  e=slot          { (append [] e) }
  |*[es] e=slot   { (append es e) }
  ;

// First rule for read-eval-print loop
command ::=
    %TK_Newline          { (litNull) }
  | e=expr %TK_Newline   { e }
  ;

literal ::=
    "null"               { (litNull)         }
  | "true"               { (litBool "true")  }
  | "false"              { (litBool "false") }
  | s= %TK_LitCharacter  { (litChar    s)    }
  | s= %TK_LitInteger    { (litInteger s)    }
  | s= %TK_LitFloat      { (litFloat   s)    }
  | s= %TK_LitString     { (litString  s)    }
  ;

value ::=
    literal
  | "\\"  "(" function
  | "\\@" "(" sfunction
  | "struct" "{" ss=slotList "}"      { (record ss)     }
  | "[" es=exprList "]"               { (array es)      }
  ;

field ::=
  ":" t=expr "=" ( e=expr      { (field t e)         }
                 | "_"         { (field t (litNull)) }
                 )
  ;

function ::=
    ")" funBody
  | x= %TK_Identifier ":" t=expr v=funRest      { (function x t v) }
  ;

funRest ::=
    ")" funBody
  | "," x= %TK_Identifier ":" t=expr v=funRest  { (function x t v) }
  ;

sfunction ::=
    x= %TK_Identifier ")" v=funBody             { (sfunction x v) }
  ;

funBody ::=
    "(" function
  | "@" "(" sfunction
  | "->" expr
  | ":" t=expr "->" ( e=expr   { (code t e)         }
                    | "_"      { (code t (litNull)) }
                    )
  ;

slot ::=
    m= %TK_Identifier
      ( "(" f=function      ";"                   { (slot m f) }
      | "@" "(" f=sfunction ";"                   { (slot m f) }
      | f=field             ";"                   { (slot m f) }
      | "=" e=expr          ";"                   { (slot m e) }
      )
  ;

slotList ::=
  s=slot               { (append [] s) }
  |*[ss] s=slot        { (append ss s) }
  ;

exprList ::=
  e=expr               { (append [] e) }
  |*[es] "," e=expr    { (append es e) }
  ;

simple ::=
    value
  | s= %TK_Identifier        { (identifier s) }
  | "(" e=expr ")"           { e }
  | "{" e=statement "}"      { e }
  ;

mkApply[f,a] ::=
    ")"      { (apply f a) }
  | ","  app={ (apply f a) }  b=expr  mkApply[app, b]
  ;

postfix ::=
  simple
  |*[f] ( "(" ( ")"                     { (call f)      }
              | a=expr  mkApply[f,a]
              )
        | "@" "(" ( ")"                 { (sapply f)    }
                  | a=expr ")"          { (sapply f a)  }
                  )
        | "." m= %TK_Identifier         { (project f m) }
        | "[" i=expr "]"                { (arrayIndex f i) }
        | "^"                           { (load f) }
        )
  ;

unary ::=
  postfix
  | "-" e=unary             { (unary "-" e) }
  | "~" e=unary             { (unary "~" e) }
  | "!" e=unary             { (unary "!" e) }
  ;

expr10 ::=
  unary
  |*[a] ( "*" b=unary       { (binary "*" a b) }
        | "/" b=unary       { (binary "/" a b) }
        | "%" b=unary       { (binary "%" a b) }
        )
  ;

expr20 ::=
  expr10
  |*[a] ( "+" b=expr10      { (binary "+" a b) }
        | "-" b=expr10      { (binary "-" a b) }
        )
  ;

expr30 ::=
  expr20
  |*[a] ( "<<" b=expr20     { (binary "<<" a b) }
        | ">>" b=expr20     { (binary ">>" a b) }
        )
  ;

expr40 ::=
  expr30
  |*[a] "&" b=expr30 { (binary "&" a b) }
  ;

expr41 ::=
  expr40
  |*[a] "^^" b=expr40 { (binary "^" a b) }
  ;

expr42 ::=
  expr41
  |*[a] "|" b=expr41 { (binary "|" a b) }
  ;

expr50 ::=
  a=expr42 ( "==" b=expr42  { (binary "==" a b) }
           | "!=" b=expr42  { (binary "!=" a b) }
           | "<"  b=expr42  { (binary "<"  a b) }
           | "<=" b=expr42  { (binary "<=" a b) }
           | ">"  b=expr42  { (binary ">"  a b) }
           | ">=" b=expr42  { (binary ">=" a b) }
           |                { a }
           )
  ;

expr60 ::=
  expr50
  |*[a] "&&" b=expr50 { (binary "&&" a b) }
  ;

expr61 ::=
  expr60
  |*[a] "||" b=expr60 { (binary "||" a b) }
  ;

expr70 ::= 
  expr61
  | "new" e1=expr61 { (alloc e1) }
  ;

expr90 ::=
  a=expr70 (":=" b=expr70 { (store a b) }
           |              { a }
           )
  ;

expr ::=
  expr90
  | "if" "(" c=expr90 ")" "then" e1=expr90 "else" e2=expr90  { (if c e1 e2) }
  ; 

statement ::=
    e1=expr ";" (e2=statement                                { (let "" e1 e2) }
                |                                            { e1 }
                )
  | "let"    s= %TK_Identifier e1=letbody  ";" e2=statement  { (let s e1 e2) }
  | "var"    s= %TK_Identifier "=" e1=expr ";" e2=statement  { (let s (alloc e1) e2) }
  ;


letbody ::= 
    "=" expr
  | "(" function
  | "@" "(" sfunction
  ;
